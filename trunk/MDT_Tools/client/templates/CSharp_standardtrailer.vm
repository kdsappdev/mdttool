#set($codeLanguage ='CSharp')
#macro(convertBoolean $p)#if($p)Y#else N#end#end
#macro(Cst_parseAComponent $p)

	public string ${p.Name}
	{
	get{ return DataTypeConverter.Utils.ToMap(this.get(FixMessage.Fields.${p.Name})); }
	set{ ${p.Name} = this.put(FixMessage.Fields.${p.Name}, ${codeGenHelper.StrFirstToLower(${p.Name})}); }
	}

#Cst_paraeAFix($p)

#end
	
#macro(Cst_paraeAFix $p)
#foreach($field in $p.Fields)
	public $FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}) ${field.Name}
	{
	get{ return DataTypeConverter.Utils.To$FixHelper.StrFirstToUpper($FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}))(this.get(FixMessage.Fields.${field.Name})); }
	set{ ${field.Name}= this.put(FixMessage.Fields.${field.Name}, ${codeGenHelper.StrFirstToLower(${field.Name})}); }
	}
#end
#foreach($group in $p.Groups)
#Cst_parseAGroup($group)

#end
#foreach($component in $p.Components)
#Cst_parseAComponent($component)
#end
#end
#macro(Cst_parseAGroup $p)

	public static readonly string GROUP_${group.Name}=FixMessage.Fields.${group.Name};
	
	public class ${group.Name} : BaseMessage
	{
#Cst_paraeAFix($p)
	}

#end
#macro(Cst_parseComponent $p)
using System;
using System.Collections.Generic;
using System.Text;

namespace Ats.Model
{

public class StandardTrailer : BaseMessage
{

#Cst_paraeAFix($p)
	}
}
#end
#Cst_parseComponent($trailer)