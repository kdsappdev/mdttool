#set($codeLanguage ='CSharp')
#macro(convertBoolean $p)#if($p)Y#else N#end#end
#macro(Cst_paraeAFix2 $p)
#foreach($field in $p.Fields)
		t.${field.Name}=${field.Name};
#end
#foreach($group in $p.Groups)
#Cst_parseAGroup2($group)
#end
#foreach($component in $p.Components)
#Cst_parseAComponent2($component)
#end
#end
#macro(Cst_parseAGroup2 $p)
		t.${group.Name}=new List<G${group.Name}>();
		if(${group.Name}!=null)
		{
			foreach( var g in ${group.Name})
			{
				G${group.Name} g${group.Name}=g.Clone();		 
				t.${group.Name}.Add(g${group.Name});
			}
		}
#end
#macro(Cst_parseAComponent2 $p)
	t.g${p.Name}=${p.Name};
#end
#macro(Cst_parseAComponent $p)

	public ${p.Name} ${p.Name}
	{
	get{ return this.Get(MessageDictionary.Fields.${p.Name}) as ${p.Name}; }
	set{ this.Put(MessageDictionary.Fields.${p.Name}, value ); }
	}

#Cst_paraeAFix($p)

#end	
#macro(Cst_paraeAFix $p)
#foreach($field in $p.Fields)
	public $FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}) ${field.Name}
	{
	get{ return DataTypeConverter.To$FixHelper.StrFirstToUpper($FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}))(this.Get(MessageDictionary.Fields.${field.Name})); }
	set{ this.Put(MessageDictionary.Fields.${field.Name}, value); }
	}
#end
#foreach($group in $p.Groups)
#Cst_parseAGroup($group)

#end
#foreach($component in $p.Components)
#Cst_parseAComponent($component)
#end
#end
#macro(Cst_parseAGroup $p)

	private readonly string GROUP_${group.Name}=MessageDictionary.Fields.${group.Name};
	public List<G${group.Name}> ${group.Name}
	{
	get{ return this.Get(GROUP_${group.Name}) as List<G${group.Name}>;}
	set{ this.Put(GROUP_${group.Name},value);}
	}
	public class G${group.Name} : BaseMessage
	{
#Cst_paraeAFix($p)
	public G${group.Name} Clone()
	{
		G${group.Name} t=new  G${group.Name}();
		#Cst_paraeAFix2($p)
		return t;
	}
	}

#end
#macro(Cst_parseComponent $p)
using System;
using System.Collections.Generic;
using System.Text;

namespace Ats.Model.MO.Component
{
 	/// <summary>
	/// StandardTrailer
	/// </summary>
	/// <remarks>
	/// $date: 创建. ${pluginName} 模板版本(v1.0.1.1)<br/>
	/// </remarks>
public class StandardTrailer : BaseMessage
{

#Cst_paraeAFix($p)
public StandardTrailer Clone()
	{
		StandardTrailer t=new StandardTrailer();
#Cst_paraeAFix2($p)
		return t;
	}
	}
}
#end
#Cst_parseComponent($trailer)