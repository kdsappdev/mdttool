#set($codeLanguage ='CSharp')
#macro(convertBoolean $p)#if($p)Y#else N#end#end
#macro(Cma_parseAComponent $p)

	public ${p.Name} ${p.Name}
	{
	get{ return this.Get(MessageDictionary.Fields.${p.Name}) as ${p.Name}; }
	set{ this.Put(MessageDictionary.Fields.${p.Name}, value ); }
	}
	
#Cma_paraeAFix($p)

#end
	
#macro(Cma_paraeAFix $p)
#foreach($field in $p.Fields)
	public $FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}) ${field.Name}
	{
	get{ return DataTypeConverter.To$FixHelper.StrFirstToUpper($FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}))(this.Get(MessageDictionary.Fields.${field.Name})); }
	set{ this.Put(MessageDictionary.Fields.${field.Name}, value); }
	}
#end
#foreach($group in $p.Groups)
#Cma_parseAGroup($group)

#end
#foreach($component in $p.Components)
#Cma_parseAComponent($component)
#end
#end
#macro(Cma_parseAGroup $p)

	public static readonly string GROUP_${group.Name}=MessageDictionary.Fields.${group.Name};
	
	public class ${group.Name} : BaseMessage
	{
#Cma_paraeAFix($p)
	}
#end
#macro(Cma_parseComponent $p)
using System;
using System.Collections.Generic;
using System.Text;
using Ats.Model.MO.Component;

namespace Ats.Model.MO.Message
{

public class ${p.Name} : FixMessage
{

#Cma_paraeAFix($p)
	}
}
#end
#Cma_parseComponent($message)