##Ibatis Po
##
package $package;

import java.math.*;
import java.util.*;

#set ($now=${GenHelper.GetNow()})
#set ($tblName=${GenHelper.GetProperty($table.TableName)})
/**
*${table.TableName}
*${table.TableComments}
*Create Time: $now
*Create By: MDT Smart Kit .
*/
public class ${tblName}Example {

    protected String orderByClause;

    protected List oredCriteria;

    public ${tblName}Example() {
        oredCriteria = new ArrayList();
    }

    protected ${tblName}Example(${tblName}Example example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }
    
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }
   
    public String getOrderByClause() {
        return orderByClause;
    }
   
    public List getOredCriteria() {
        return oredCriteria;
    }
    
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }
   
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }
   
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }
    
    public void clear() {
        oredCriteria.clear();
    }

    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }
    
#foreach($column in ${table.Columns})
#set ($property=${GenHelper.GetProperty(${column.Name})})
#set ($field=${GenHelper.GetField(${column.Name})})
#set ($datatype=${column.JavaType})
        public Criteria and${property}IsNull() {
            addCriterion("${column.Name} is null");
            return this;
        }

        public Criteria and${property}IsNotNull() {
            addCriterion("${column.Name} is not null");
            return this;
        }

        public Criteria and${property}EqualTo($datatype value) {
            addCriterion("${column.Name} =", value, "$field");
            return this;
        }

        public Criteria and${property}NotEqualTo($datatype value) {
            addCriterion("${column.Name} <>", value, "$field");
            return this;
        }

        public Criteria and${property}GreaterThan($datatype value) {
            addCriterion("${column.Name} >", value, "$field");
            return this;
        }

        public Criteria and${property}GreaterThanOrEqualTo($datatype value) {
            addCriterion("${column.Name} >=", value, "$field");
            return this;
        }

        public Criteria and${property}LessThan($datatype value) {
            addCriterion("${column.Name} <", value, "$field");
            return this;
        }

        public Criteria and${property}LessThanOrEqualTo($datatype value) {
            addCriterion("${column.Name} <=", value, "$field");
            return this;
        }
#if(${datatype}=="String")
        public Criteria and${property}Like($datatype value) {
            addCriterion("${column.Name} like", value, "$field");
            return this;
        }

        public Criteria and${property}NotLike($datatype value) {
            addCriterion("${column.Name} not like", value, "$field");
            return this;
        }
#end
        public Criteria and${property}In(List values) {
            addCriterion("${column.Name} in", values, "$field");
            return this;
        }

        public Criteria and${property}NotIn(List values) {
            addCriterion("${column.Name} not in", values, "$field");
            return this;
        }

        public Criteria and${property}Between($datatype value1, $datatype value2) {
            addCriterion("${column.Name} between", value1, value2, "$field");
            return this;
        }

        public Criteria and${property}NotBetween($datatype value1, $datatype value2) {
            addCriterion("${column.Name} not between", value1, value2, "$field");
            return this;
        }
#end

    }
}