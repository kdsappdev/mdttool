## model字符串
#set($model=${codeGenHelper.GetClassName(${tableInfo.tableName},$codeRule)})
## 第一个字符为小写的model字符串
#set($lmodel=${codeGenHelper.StrFirstToLower($model)})
#set($region="#")
using System;
using System.Collections.Generic;
using System.Text;
using Ats.Foundation.Condition;
using Ats.Foundation.Message;
using Ats.DAL.WebService;
using ${dalNameSpace};
using ${idalNameSpace};
using ${modelNameSpace};
namespace ${dalNameSpace}
{
	/// <summary>
#if(!$codeGenHelper.IsNullOrEmpty(${tableInfo.TableComments}))
	/// ${tableInfo.TableComments} 数据访问服务#set($comments=${tableInfo.TableComments})
#else
	/// ${tableInfo.TableName}#set($comments=$model)
#end
	/// </summary>
	/// <remarks>
	/// $date: 创建. ${pluginName} 模板版本(v1.0.1.0)<br/>
	/// </remarks>
	public class ${model}DALServer: BaseDALServer,I${model}DALServer
	{
		
		${region}region Insert
		/// <summary>
		/// 增加 $comments 方法
		/// </summary>
		/// <param name="${lmodel}">$!{tableInfo.TableComments}${lmodel}对象</param>
		/// <returns>AtsMsg对象</returns>
		public AtsMsg<${model}> Insert(${model} ${lmodel})
		{
			string str = MsgHelper.Serializer(${lmodel});
			var args=new []{ str };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "insert";
			return ServersHelper.GetResultMSG<${model}>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion

		${region}region Delete
		/// <summary>
		/// 删除 $comments 方法
		/// </summary>
		/// <param name="deleteCondition">Condition对象</param>
		/// <returns>AtsMsg对象</returns>
		public AtsMsg<${model}> Delete(Condition deleteCondition)
		{
			string str = MsgHelper.Serializer(deleteCondition);
			var args=new []{ str };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "delete";
			return ServersHelper.GetResultMSG<${model}>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion

		${region}region Update
		/// <summary>
		/// 更新 $comments 方法
		/// </summary>
		/// <param name="${lmodel}">${model}对象</param>
		/// <param name="updateCondition">Condition对象</param>
		/// <returns>AtsMsg对象</returns>
		public AtsMsg<${model}> Update(${model} ${lmodel},Condition updateCondition)
		{
			string str1 = MsgHelper.Serializer(${lmodel});
			string str2 = MsgHelper.Serializer(updateCondition);
			var args = new[]{ str1,str2 };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "update";
			return ServersHelper.GetResultMSG<${model}>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion
		
		${region}region UpdateBatch
		/// <summary>
		/// 批量更新 $comments 方法
		/// </summary>
		/// <param name="List<${lmodel}>">${model}对象集合</param>
		/// <param name="updateCondition">Condition对象</param>
		/// <returns>AtsMsg对象</returns>
		public AtsMsg<List<${model}>> UpdateBatch(List<${model}> ${lmodel}s,Condition updateCondition)
		{
			string str1 = MsgHelper.Serializer(${lmodel}s);
			string str2 = MsgHelper.Serializer(updateCondition);
			var args = new[]{ str1,str2 };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "updateBatch";
			return ServersHelper.GetResultMSG<List<${model}>>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion
		
		${region}region Select
		/// <summary>
		/// 查找 $comments 方法
		/// </summary>
		/// <param name="queryCondition">Condition对象</param>
		/// <returns>AtsMsg对象</returns>
		public AtsMsg<List<${model}>> Select(Condition queryCondition)
		{			 
			string str = MsgHelper.Serializer(queryCondition);
			var args = new[]{ str };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "select";
			return ServersHelper.GetResultMSG<List<${model}>>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion
		
		${region}region SelectCount
		/// <summary>
		/// 查找 $comments 数量方法
		/// </summary>
		/// <param name="queryCondition">Condition对象</param>
		/// <returns>AtsMsg对象</returns>
		public AtsMsg<Dictionary<string,int>> SelectCount(Condition queryCondition)
		{			 
			string str = MsgHelper.Serializer(queryCondition);
			var args = new[]{ str };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "selectCount";
			return ServersHelper.GetResultMSG<Dictionary<string,int>>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion
		
		${region}region SelectPage
		/// <summary>
		/// 分页查找 $comments 方法
		/// </summary>
		/// <param name="queryCondition">Condition对象</param>
		/// <returns>AtsMsg对象</returns>
		public AtsMsg<List<${model}>> SelectPage(Condition queryCondition)
		{			 
			string str = MsgHelper.Serializer(queryCondition);
			var args = new[]{ str };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "selectPage";
			return ServersHelper.GetResultMSG<List<${model}>>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion
	}
}