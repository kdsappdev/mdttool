## model字符串
#set($model=${codeGenHelper.GetClassName(${tableInfo.tableName},$codeRule)})
## 第一个字符为小写的model字符串
#set($lmodel=${codeGenHelper.StrFirstToLower($model)})
#set($region="#")
using System;
using System.Collections.Generic;
using System.Text;
using Ats.Foundation.Condition;
using Ats.Foundation.Message;
using Ats.DAL.WebService;
using ${dalNameSpace};
using ${idalNameSpace};
using ${modelNameSpace};
namespace ${dalNameSpace}
{
	/// <summary>
#if(!$codeGenHelper.IsNullOrEmpty(${tableInfo.TableComments}))
	/// ${tableInfo.TableComments} 数据访问服务
#else
	/// ${tableInfo.TableName}
#end
	/// </summary>
	/// <remarks>
	/// $date: 创建. ${pluginName} <br/>
	/// </remarks>
	public class ${model}DALServer: BaseDALServer,I${model}DALServer
	{
		
		${region}region Insert
		/// <summary>
		/// 增加${model}方法
		/// </summary>
		/// <param name="${lmodel}">$!{tableInfo.TableComments}</param>
		/// <returns>AtsMsg对象</returns>
		public AtsMsg<${model}> Insert(${model} ${lmodel})
		{
			string str = MsgHelper.Serializer(${lmodel});
			var args=new []{ str };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "insert";
			return ServersHelper.GetResultMSG<${model}>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion

		${region}region Delete
		 
		public AtsMsg<${model}> Delete(Condition deleteCondition)
		{
			string str = MsgHelper.Serializer(deleteCondition);
			var args=new []{ str };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "delete";
			return ServersHelper.GetResultMSG<${model}>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion

		${region}region Update
		 
		public AtsMsg<${model}> Update(${model} ${lmodel},Condition updateCondition)
		{
			string str1 = MsgHelper.Serializer(${lmodel});
			string str2 = MsgHelper.Serializer(updateCondition);
			var args = new[]{ str1,str2 };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "update";
			return ServersHelper.GetResultMSG<${model}>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion
		
		${region}region Update
		 
		public AtsMsg<${model}> Select(Condition queryCondition)
		{			 
			string str = MsgHelper.Serializer(queryCondition);
			var args = new[]{ str };
			const string strURL = "/ats/services/I${model}Service?wsdl";
			const string strClassName = "I${model}Service";
			const string strMonthedName = "select";
			return ServersHelper.GetResultMSG<${model}>(strURL, strClassName, strMonthedName,args);
		}
		${region}endregion
	}
}