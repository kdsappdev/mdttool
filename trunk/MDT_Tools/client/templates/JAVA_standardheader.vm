#set($codeLanguage ='Java')
#macro(convertBoolean $p)#if($p)Y#else N#end#end
#macro(Jsh_parseAComponent $p)


	public ${p.Name} get${p.Name}(){
			return (${p.Name}) DataTypeConverter.Utils.toMap(this.get(FixMessage.Fields.${p.Name}));
		}
		public void set${p.Name}(${p.Name} ${codeGenHelper.StrFirstToLower(${p.Name})}){
			this.put(FixMessage.Fields.${p.Name}, ${codeGenHelper.StrFirstToLower(${p.Name})});
		}

#Jsh_paraeAFix($p)

#end
	
#macro(Jsh_paraeAFix $p)
#foreach($field in $p.Fields)
		public $FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}) get${field.Name}(){
			return DataTypeConverter.Utils.to$FixHelper.StrFirstToUpper($FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}))(this.get(FixMessage.Fields.${field.Name}));
		}
		public void set${field.Name}($FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}) ${codeGenHelper.StrFirstToLower(${field.Name})}){
			this.put(FixMessage.Fields.${field.Name}, ${codeGenHelper.StrFirstToLower(${field.Name})});
		}
#end
#foreach($group in $p.Groups)
#Jsh_parseAGroup($group)

#end
#foreach($component in $p.Components)
#Jsh_parseAComponent($component)
#end
#end
#macro(Jsh_parseAGroup $p)

	public static final String GROUP_${group.Name}=FixMessage.Fields.${group.Name};
	
	public static class ${group.Name} extends BaseMessage{
#Jsh_paraeAFix($p)
	}

#end
#macro(Jsh_parseComponent $p)
package ats.bbox.common.mo.component;

import ats.bbox.common.mo.BaseMessage;
import ats.bbox.common.mo.FixMessage;
import ats.bbox.framework.utils.DataTypeConverter;


public class StandardHeader extends BaseMessage{

#Jsh_paraeAFix($p)
}
#end
#Jsh_parseComponent($header)