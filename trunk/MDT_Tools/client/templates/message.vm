#set($codeLanguage ='Java')
#macro(convertBoolean $p)#if($p)Y#else N#end#end

#macro(parseAComponent $p)

	public class ${p.Name} extends BaseMessage{

	public $FixHelper.GetFieldOrGroupType($codeLanguage,${p.Name}) get${p.Name}(){
			return DataTypeConverter.Utils.to$FixHelper.GetFieldOrGroupType($codeLanguage,${p.Name})(this.get(FixMessage.Fields.${p.Name}));
		}
		public void set${p.Name}($FixHelper.GetFieldOrGroupType($codeLanguage,${p.Name}) ${codeGenHelper.StrFirstToLower(${p.Name})}){
			this.put(FixMessage.Fields.${p.Name}, ${codeGenHelper.StrFirstToLower(${p.Name})});
		}
		
#paraeAFix($p)
}
#end
	
#macro(paraeAFix $p)
#foreach($field in $p.Fields)
		public $FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}) get${field.Name}(){
			return DataTypeConverter.Utils.to$FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name})(this.get(FixMessage.Fields.${field.Name}));
		}
		public void set${field.Name}($FixHelper.GetFieldOrGroupType($codeLanguage,${field.Name}) ${codeGenHelper.StrFirstToLower(${field.Name})}){
			this.put(FixMessage.Fields.${field.Name}, ${codeGenHelper.StrFirstToLower(${field.Name})});
		}
#end
#foreach($group in $p.Groups)
#parseAGroup($group)
#end
#foreach($component in $p.Components)
#parseAComponent($component)
#end
#end
#macro(parseAGroup $p)

	public static final String GROUP_${group.Name}=FixMessage.Fields.${group.Name};
	
	public static class ${group.Name} extends BaseMessage{
#paraeAFix($p)
	}
#end
#macro(parseComponent $p)
public class ${p.Name} extends BaseMessage{
#paraeAFix($p)
}
#end
#parseComponent($message)
