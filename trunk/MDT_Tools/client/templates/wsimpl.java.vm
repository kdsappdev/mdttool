## model字符串
#set($model=${codeGenHelper.GetClassName(${tableInfo.tableName},$codeRule)})
## 第一个字符为小写的model字符串
#set($lmodel=${codeGenHelper.StrFirstToLower($model)})
package ${wsPackage}.impl;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import org.apache.log4j.Logger;

import ats.message2.Exception.SerializerException;
import ats.message2.MsgHelper;
import ats.message2.CharsetConvertType;
import ats.pingo.integration.endpoint.ws.basewebservice.BaseWebService;
import ${bsPackage}.I${model}Server;
import ${wsPackage}.I${model};
import ats.common.model.po.${model};
import ats.foundation.condition.Condition;
import ats.foundation.utils.util.ZipUtils;
import ats.foundation.utils.util.CharsetConvert;
import ats.foundation.utils.exception.CodeException;

/**
#if(!$codeGenHelper.IsNullOrEmpty(${tableInfo.TableComments}))
 *${tableInfo.TableComments} WS实现
#else
 *${tableInfo.TableName}
#end
 *
 *$date: 创建. ${pluginName} 模板版本(v1.0.3.0)<br/>
 */
public class ${model}Service extends BaseWebService implements I${model} {
	private Logger logger = Logger.getLogger(this.getClass().getName());
#set($ibsServer='i'+${lmodel}+'Server')
	private I${model}Server ${ibsServer};

	public void setI${lmodel}Server(I${model}Server ${ibsServer}) {
		this.${ibsServer} = ${ibsServer};
	}


        /**
	 *增加${lmodel}对象
	 *
	 * @param ${lmodel}b[MsgHelper.Serialize序列化字符串压缩字节码]
	 * @return ${lmodel}[AtsMsg字符串压缩字节码]
	 */
	@Override
	public byte[] insert(byte[] ${lmodel}b) {
	        String result = "";
		try {		 
			
			String msg = ZipUtils.ungzipByte(${lmodel}b); 
			logger.debug("after ungzipByte param:" + msg);
			${model} ${lmodel} = MsgHelper.Deserialize(msg, ${model}.class,
					CharsetConvertType.None);			
			${ibsServer}.insert(${lmodel});
                        result = MsgHelper.SerializerObjectToATSMessage(${lmodel}, CharsetConvertType.None);			 	 
		}

		catch (SerializerException e) {
			logger.error("Deserialize ${model} failed!", e);
			result = MsgHelper.AtsMessageToString("4103",
					"Deserialize ${model} failed!", e.getMessage());			
		}

		catch (CodeException e) {
			logger.error("insert ${model} failed!", e);
			result = MsgHelper.AtsMessageToString(e.code(),
					"insert ${model} failed!", e.getMessage());			
		} catch (Exception e) {
			logger.error("insert failed!", e);
			result = MsgHelper.AtsMessageToString("4102",
					"insert  failed!", e.getMessage());			
		}
		logger.debug(result);
		return ZipUtils.gzipStr(result);
	}

 
        /**
	 *删除${model}对象
	 *
	 * @param Condition对象[MsgHelper.Serialize序列化字符串压缩字节码]
	 * @return ${model}[AtsMsg字符串压缩字节码]
	 */
	@Override
	public byte[] delete(byte[] deleteCondition)  {
	        String result = "";
		try {
			 
			String msg = ZipUtils.ungzipByte(deleteCondition);
			logger.debug("after ungzipByte param:" + msg);
			Condition condition = MsgHelper.Deserialize(msg, Condition.class,
					CharsetConvertType.None);
			${ibsServer}.delete(condition);
			result = MsgHelper.AtsMessageToString("0000", "sucess");		
		} catch (SerializerException e) {
			logger.error("Deserialize ${model} failed!", e);
			result = MsgHelper.AtsMessageToString("4103",
					"Deserialize Condition failed!", e.getMessage());		
		}
		catch (CodeException e) {
			logger.error("delete  failed!", e);
			result = MsgHelper.AtsMessageToString(e.code(),
					"delete  failed!", e.getMessage());			
		} catch (Exception e) {
			logger.error("delete failed!", e);
			result = MsgHelper.AtsMessageToString("4102",
					"delete  failed!", e.getMessage());			
		}
		logger.debug(result);
		return ZipUtils.gzipStr(result);
	}

	
	/**
	 *更新${model}方法
	 *
	 * @param ${lmodel}b对象[MsgHelper.Serialize序列化字符串压缩字节码]
	 * @param Condition对象[MsgHelper.Serialize序列化字符串压缩字节码]
	 * @return ${lmodel}[AtsMsg字符串压缩字节码]
	 */
	@Override
	public byte[] update(byte[] ${lmodel}b,byte[] updateCondition) {
	        String result = "";
		try {
			 
			String msg = ZipUtils.ungzipByte(updateCondition);
			String msg2 = ZipUtils.ungzipByte(${lmodel}b);
			logger.debug("after ungzipByte param1:" + msg);
			logger.debug("after ungzipByte param2:" + msg2);			 
			Condition condition = MsgHelper.Deserialize(msg, Condition.class,
					CharsetConvertType.None);
			${model} ${lmodel} = MsgHelper.Deserialize(msg2, ${model}.class,
					CharsetConvertType.None);
			${ibsServer}.update(${lmodel}, condition);
			result = MsgHelper.AtsMessageToString("0000", "sucess");		
		} catch (SerializerException e) {
			logger.error("Deserialize failed!", e);
			result = MsgHelper.AtsMessageToString("4103",
					"Deserialize failed!", e.getMessage());			
		}

		catch (CodeException e) {
			logger.error("update failed!", e);
			result = MsgHelper.AtsMessageToString(e.code(),
					"update  failed!", e.getMessage());			
		} catch (Exception e) {
			logger.error("update failed!", e);
			result = MsgHelper.AtsMessageToString("4102",
					"delete  failed!", e.getMessage());			
		}
		logger.debug(result);
		return ZipUtils.gzipStr(result);
	}

	/**
	 * 批量更新${model}对象，先删除后增加
	 * @param ${lmodel}s对象集合[MsgHelper.Serialize序列化字符串压缩字节码]
	 * @param Condition对象[MsgHelper.Serialize序列化字符串压缩字节码]
	 * @return 更新成功的记录集合[AtsMsg字符串压缩字节码]
	 */	
        @Override
	public byte[] updateBatch(byte[] ${lmodel}s,byte[] updateCondition) {
	        String result = "";
		try {
			 
			String msg = ZipUtils.ungzipByte(updateCondition);
			String msg2 = ZipUtils.ungzipByte(${lmodel}s);
			logger.debug("after ungzipByte param1:" + msg);
			logger.debug("after ungzipByte param2:" + msg2);
			Condition condition = MsgHelper.Deserialize(msg, Condition.class,
					CharsetConvertType.None);
			List<${model}> ${lmodel} = MsgHelper.Deserialize2(msg2, ${model}.class,
					CharsetConvertType.None);
			${ibsServer}.updateBatch(${lmodel}, condition);
			result = MsgHelper.AtsMessageToString("0000",
					"sucess");			
		} catch (SerializerException e) {
			logger.error("Deserialize failed!", e);
			result = MsgHelper.AtsMessageToString("4103",
					"Deserialize failed!", e.getMessage());			
		}

		catch (CodeException e) {
			logger.error("update failed!", e);
			result = MsgHelper.AtsMessageToString(e.code(),
					"update  failed!", e.getMessage());			
		} catch (Exception e) {
			logger.error("update failed!", e);
			result = MsgHelper.AtsMessageToString("4102",
					"delete  failed!", e.getMessage());			
		}
		logger.debug(result);
		return ZipUtils.gzipStr(result);
	}
	

        /**
	 *根据Condition对象查询出${lmodel}集合对象
	 *
	 * @param Condition对象[字符串压缩字节码]
	 * @return ${lmodel}[字符串压缩字节码]
	 */
	@Override
	public byte[] select(byte[] queryCondition) {
		String result = "";
		try {
			 
			String msg = ZipUtils.ungzipByte(queryCondition);
			logger.debug("after ungzipByte param:" + msg);			 
			Condition condition = MsgHelper.Deserialize(msg, Condition.class,
					CharsetConvertType.None);
			List<${model}> lt=${ibsServer}.select(condition);
			result = MsgHelper.SerializerObjectToATSMessage(lt, CharsetConvertType.None);			
		} catch (SerializerException e) {
			logger.error("Deserialize failed!", e);
			result = MsgHelper.AtsMessageToString("4103",
					"Deserialize Condition failed!", e.getMessage());			
		} catch (CodeException e) {
			logger.error("select failed!", e);
			result = MsgHelper.AtsMessageToString(e.code(),
					"select  failed!", e.getMessage());			
		} catch (Exception e) {
			logger.error("select failed!", e);
			result = MsgHelper.AtsMessageToString("4102",
					"select failed!", e.getMessage());			
		}
		logger.debug(result);
		return ZipUtils.gzipStr(result);
	}
	
	/**
	 *根据Condition对象查询出${lmodel}集合数量
	 *
	 * @param Condition对象[字符串压缩字节码]
	 * @return ${lmodel}数量[字符串压缩字节码]
	 */
	@Override
	public byte[] selectCount(byte[] queryCondition)
	{
		String result = "";
		try {
			 
			String msg = ZipUtils.ungzipByte(queryCondition);
			logger.debug("after ungzipByte param:" + msg);			 
			Condition condition = MsgHelper.Deserialize(msg, Condition.class,
					CharsetConvertType.None);
			HashMap<String,BigDecimal> countMap=${ibsServer}.selectCount(condition);
			result = MsgHelper.SerializerObjectToATSMessage(countMap, CharsetConvertType.None);			
		} catch (SerializerException e) {
			logger.error("Deserialize failed!", e);
			result = MsgHelper.AtsMessageToString("4103",
					"Deserialize Condition failed!", e.getMessage());			
		} catch (CodeException e) {
			logger.error("select failed!", e);
			result = MsgHelper.AtsMessageToString(e.code(),
					"select  failed!", e.getMessage());			
		} catch (Exception e) {
			logger.error("select failed!", e);
			result = MsgHelper.AtsMessageToString("4102",
					"select failed!", e.getMessage());			
		}
		logger.debug(result);
		return ZipUtils.gzipStr(result);
	}
	
	/**
	 *根据Condition对象分页查询出${lmodel}集合
	 *
	 * @param Condition对象[字符串压缩字节码]
	 * @return ${lmodel}[字符串压缩字节码]
	 */
	@Override
	public byte[] selectPage(byte[] queryCondition)
	{
		String result = "";
		try {			 
			String msg = ZipUtils.ungzipByte(queryCondition);
			logger.debug("after ungzipByte param:" + msg);			 
			Condition condition = MsgHelper.Deserialize(msg, Condition.class,
					CharsetConvertType.None);
			List<${model}> lt=${ibsServer}.selectPage(condition);
			result = MsgHelper.SerializerObjectToATSMessage(lt, CharsetConvertType.None);			
		} catch (SerializerException e) {
			logger.error("Deserialize failed!", e);
			result = MsgHelper.AtsMessageToString("4103",
					"Deserialize Condition failed!", e.getMessage());
				
		} catch (CodeException e) {
			logger.error("select failed!", e);
			result = MsgHelper.AtsMessageToString(e.code(),
					"select  failed!", e.getMessage());				
		} catch (Exception e) {
			logger.error("select failed!", e);
			result = MsgHelper.AtsMessageToString("4102",
					"select failed!", e.getMessage());			
		}
		logger.debug(result);
		return ZipUtils.gzipStr(result);
	}

}
